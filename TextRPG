using System;
using System.Collections.Generic;

    class Program2
    {
        static void Main()
        {
            Player player = new Player();
            Inventory inventory = new Inventory();
            Shop shop = new Shop();
            Dungeon dungeon = new Dungeon();

            while (true)
            {
                Console.Clear();
                Console.WriteLine("스파르타 마을에 오신 여러분 환영합니다.");
                Console.WriteLine("이 곳에서 던전으로 들어가기 전 활동을 할 수 있습니다.");
                Console.WriteLine("1. 상태 보기");
                Console.WriteLine("2. 인벤토리");
                Console.WriteLine("3. 상점");
                Console.WriteLine("4. 던전");
                Console.WriteLine("0. 종료\n");
                Console.Write("입력: ");
                string input = Console.ReadLine();

                switch (input)
                {
                    case "1":
                        player.ShowStatus(inventory);
                        break;
                    case "2":
                        inventory.ShowInventory();
                        break;
                    case "3":
                        shop.OpenShop(player, inventory);
                        break;
                    case "4":
                        dungeon.dungeon(player, inventory);
                        break;
                    case "0":
                        return;
                    default:
                        Console.WriteLine("잘못된 입력입니다.");
                        break;
                }
            }
        }
    }

    class Player
    {
        public int Level = 1;
        public string Name = "Sungwon";
        public string Job = "전사";
        public int BaseAtk = 10;
        public int BaseDef = 5;
        public int Gold = 0;

        private int hp = 100;
        public int HP
        {
            get => hp;
            set => hp = value > 100 ? 100 : value;
        }

        public int TotalDef(Inventory inv)
        {
            return BaseDef + inv.GetTotalDefense();
        }
        public int TotalAtk(Inventory inv)
        {
            return BaseAtk + inv.GetTotalAttack ();
        }

    public void ShowStatus(Inventory inv)
        {
            Console.Clear();
            Console.WriteLine($"Lv. {Level}");
            Console.WriteLine($"{Name} ( {Job} )");
            Console.WriteLine($"공격력 : {BaseAtk + inv.GetTotalAttack()}");
            Console.WriteLine($"방어력 : {BaseDef + inv.GetTotalDefense()}");
            Console.WriteLine($"체  력 : {HP}");
            Console.WriteLine($"Gold : {Gold} G");
            Console.WriteLine("\n0. 나가기");
            Console.ReadLine();
        }
    }

    class Inventory
    {
        public List<Item> Items = new List<Item>();

        public int GetTotalAttack()
        {
            return Items.Where(item => item.Equipped).Sum(item => item.Atk);
        }

        public int GetTotalDefense()
        {
            return Items.Where(item => item.Equipped).Sum(item => item.Def);
        }

    public void ShowInventory()
        {
            Console.Clear();
            Console.WriteLine("인벤토리");
            Console.WriteLine("보유 중인 아이템을 관리할 수 있습니다.\n");
            Console.WriteLine("[아이템 목록]");

            if (Items.Count == 0)
            {
                Console.WriteLine("- 보유 중인 아이템이 없습니다.");
            }
            else
            {
                foreach (var item in Items)
                {
                    string equip = item.Equipped ? "[E]" : "   ";
                    string stat = item.Atk > 0 ? $"공격력 +{item.Atk}" : $"방어력 +{item.Def}";
                    Console.WriteLine($"- {equip}{item.Name} | {stat} | {item.Desc}");
                }
            }

            Console.WriteLine("\n1. 장착 관리");
            Console.WriteLine("0. 나가기\n");
            Console.Write("원하시는 행동을 입력해주세요: ");
            string input = Console.ReadLine();

            if (input == "1")
            {
                ManageEquip();
            }
        }

        public void ManageEquip()
        {
            Console.Clear();
            Console.WriteLine("인벤토리 - 장착 관리");
            Console.WriteLine("보유 중인 아이템을 관리할 수 있습니다.\n");
            Console.WriteLine("[아이템 목록]");

            for (int i = 0; i < Items.Count; i++)
            {
                var item = Items[i];
                string equip = item.Equipped ? "[E]" : "   ";
                string stat = item.Atk > 0 ? $"공격력 +{item.Atk}" : $"방어력 +{item.Def}";
                Console.WriteLine($"- {i + 1} {equip}{item.Name} | {stat} | {item.Desc}");
            }

            Console.WriteLine("\n0. 나가기");
            Console.Write("원하시는 행동을 입력해주세요: ");
            string input = Console.ReadLine();

            if (input == "0") return;

            if (int.TryParse(input, out int idx) && idx >= 1 && idx <= Items.Count)
            {
                var item = Items[idx - 1];
                item.Equipped = !item.Equipped;
                Console.WriteLine(item.Equipped ? "장착했습니다." : "장착을 해제했습니다.");
            }
            else
            {
                Console.WriteLine("잘못된 입력입니다.");
            }

            Console.ReadLine();
        }
    }

class Shop
{
    private List<Item> shopItems = new List<Item>()
        {
            new Item("수련자 갑옷", 0, 5, "수련에 도움을 주는 갑옷입니다.", 1000),
            new Item("무쇠갑옷", 0, 9, "무쇠로 만들어져 튼튼한 갑옷입니다.", 2000),
            new Item("스파르타의 갑옷", 0, 15, "스파르타의 전사들이 사용했다는 전설의 갑옷입니다.", 3500),
            new Item("낡은 검", 2, 0, "쉽게 볼 수 있는 낡은 검 입니다.", 600),
            new Item("청동 도끼", 5, 0, "어디선가 사용됐던거 같은 도끼입니다.", 1500),
            new Item("스파르타의 창", 7, 0, "스파르타의 전사들이 사용했다는 전설의 창입니다.", 2500)
        };

    public void OpenShop(Player player, Inventory inventory)
    {
        while (true)
        {
            Console.Clear();
            Console.WriteLine("상점");
            Console.WriteLine("필요한 아이템을 얻을 수 있는 상점입니다.\n");
            Console.WriteLine("[보유 골드]");
            Console.WriteLine($"{player.Gold} G\n");

            Console.WriteLine("[아이템 목록]");
            for (int i = 0; i < shopItems.Count; i++)
            {
                var item = shopItems[i];
                bool owned = inventory.Items.Exists(it => it.Name == item.Name);
                string price = owned ? "[구매완료]" : item.Price + " G";
                string stat = item.Atk > 0 ? $"공격력 +{item.Atk}" : $"방어력 +{item.Def}";
                Console.WriteLine($"- {i + 1}. {item.Name} | {stat} | {item.Desc} | {price}");
            }

            Console.WriteLine("\n1. 아이템 구매");
            Console.WriteLine("0. 나가기\n");
            Console.Write("원하시는 행동을 입력해주세요.\n>> ");
            string input = Console.ReadLine();

            if (input == "0") break;
            else if (input == "1")
            {
                Console.Write("구매할 아이템 번호를 입력하세요: ");
                string select = Console.ReadLine();

                if (int.TryParse(select, out int idx) && idx >= 1 && idx <= shopItems.Count)
                {
                    var item = shopItems[idx - 1];
                    bool owned = inventory.Items.Exists(it => it.Name == item.Name);
                    if (owned)
                    {
                        Console.WriteLine("이미 구매한 아이템입니다.");
                        Console.ReadLine();
                        continue;
                    }

                    Console.WriteLine($"{item.Name}을(를) 구매하시겠습니까?\n1. 네\n0. 아니오");
                    string confirm = Console.ReadLine();
                    if (confirm == "1")
                    {
                        if (player.Gold >= item.Price)
                        {
                            player.Gold -= item.Price;
                            inventory.Items.Add(new Item(item.Name, item.Atk, item.Def, item.Desc, item.Price));
                            Console.WriteLine("구매를 완료했습니다.");
                        }
                        else
                        {
                            Console.WriteLine("Gold가 부족합니다.");
                        }
                    }
                    else if (confirm == "0")
                    {
                        Console.WriteLine("구매를 취소했습니다.");
                    }
                    else
                    {
                        Console.WriteLine("잘못된 입력입니다.");
                    }
                }
                else
                {
                    Console.WriteLine("잘못된 입력입니다.");
                }
                Console.ReadLine();
            }
            else
            {
                Console.WriteLine("잘못된 입력입니다.");
                Console.ReadLine();
            }
        }
    }
}

class Dungeon
{
    public void dungeon(Player player, Inventory inventory)
    {
        while (true)
        {
            Console.Clear();
            Console.WriteLine("던전입장");
            Console.WriteLine("이곳에서 던전으로 들어가기 전 활동을 할 수 있습니다.\n");
            Console.WriteLine("1. 쉬운 던전 | 권장 방어력 : 5");
            Console.WriteLine("2. 일반 던전 | 권장 방어력 : 11");
            Console.WriteLine("3. 어려운 던전 | 권장 방어력 : 17");
            Console.WriteLine("0. 나가기\n");

            Console.Write("원하시는 행동을 입력해주세요: ");
            string input = Console.ReadLine();

            if (input == "0") break;
            else if (input == "1") EnterDungeon(player, inventory, "쉬운 던전", 5, 1000);
            else if (input == "2") EnterDungeon(player, inventory, "일반 던전", 11, 1700);
            else if (input == "3") EnterDungeon(player, inventory, "어려운 던전", 17, 2500);
            else
            {
                Console.WriteLine("잘못된 입력입니다.");
                Console.ReadLine();
            }
        }
    }

    public void EnterDungeon(Player player, Inventory inventory, string name, int requiredDef, int baseReward)
    {
        Console.Clear();
        Random rand = new Random();

        int prevHP = player.HP;
        int prevGold = player.Gold;

        bool success;

        if (player.TotalDef(inventory) < requiredDef)
        {
            success = rand.Next(100) >= 40;
        }
        else
        {
            success = true;
        }

        if (success)
        {
            int defGap = Math.Max(0, player.TotalDef(inventory) - requiredDef);
            int hpLoss = rand.Next(20 - defGap, 36 - defGap); // 20~35 감소, 방어력 차이만큼 감소량 줄어듦
            player.HP -= hpLoss;
            if (player.HP < 0) player.HP = 0;

            int bonusGold = (int)(baseReward * (player.TotalAtk(inventory) * 2 / 100.0));
            int totalReward = baseReward + bonusGold;
            player.Gold += totalReward;

            Console.WriteLine("던전 클리어\n축하합니다!!");
            Console.WriteLine($"<{name}>을 클리어 하였습니다.\n");
            Console.WriteLine("[탐험 결과]");
            Console.WriteLine($"체력 {prevHP} -> {player.HP}");
            Console.WriteLine($"Gold {prevGold} G -> {player.Gold} G");
        }
        else
        {
            player.HP -= 49;
            if (player.HP < 0) player.HP = 0;

            Console.WriteLine("던전 공략에 실패했습니다.\n");
            Console.WriteLine("[탐험 결과]");
            Console.WriteLine($"체력 {prevHP} -> {player.HP}");
        }

        Console.WriteLine("\n0. 나가기");
        Console.Write("원하시는 행동을 입력해주세요: ");
        Console.ReadLine();
    }
}

class Item
{
    public string Name;
    public int Atk;
    public int Def;
    public string Desc;
    public bool Equipped;
    public int Price;

    public Item(string name, int atk, int def, string desc, int price)
    {
        Name = name;
        Atk = atk;
        Def = def;
        Desc = desc;
        Price = price;
        Equipped = false;
    }
}
